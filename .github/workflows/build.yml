name: Build Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'
    
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install python-tk@3.13
          brew link --overwrite python-tk@3.13
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          python -m pip install pywin32
        fi
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build with PyInstaller
      timeout-minutes: 30
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          pyinstaller --clean --name=NetFucker --noconsole --onefile --add-data="requirements.txt;." --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=tkinter.scrolledtext --collect-all=requests --collect-all=urllib3 --runtime-tmpdir=. --windowed netfucker.py
          if [[ -f "icon.ico" ]]; then
            pyinstaller --clean --name=NetFucker --noconsole --onefile --add-data="requirements.txt;." --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=tkinter.scrolledtext --collect-all=requests --collect-all=urllib3 --runtime-tmpdir=. --windowed --icon=icon.ico netfucker.py
          fi
        else
          pyinstaller --clean --name=NetFucker --noconsole --onefile --add-data="requirements.txt:." --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=tkinter.scrolledtext --collect-all=requests --collect-all=urllib3 --runtime-tmpdir=. --windowed --target-arch=universal2 netfucker.py
          if [[ -f "icon.icns" ]]; then
            pyinstaller --clean --name=NetFucker --noconsole --onefile --add-data="requirements.txt:." --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=tkinter.scrolledtext --collect-all=requests --collect-all=urllib3 --runtime-tmpdir=. --windowed --target-arch=universal2 --icon=icon.icns netfucker.py
          fi
        fi
    
    - name: Create Release Archive
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cd dist
          powershell -Command "Compress-Archive -Path NetFucker.exe -DestinationPath ../NetFucker_Windows.zip -Force"
        else
          cd dist
          zip -r ../NetFucker_Darwin.zip NetFucker
        fi
      shell: bash
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: NetFucker-${{ matrix.os }}
        path: NetFucker_*.zip

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from netfucker.py
      id: version
      run: |
        version=$(grep -o 'self.current_version = "[^"]*"' netfucker.py | cut -d'"' -f2)
        echo "version=$version" >> $GITHUB_OUTPUT
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.version.outputs.version }}
        tag_name: ${{ steps.version.outputs.version }}
        files: |
          NetFucker-windows-latest/NetFucker_Windows.zip
          NetFucker-macos-latest/NetFucker_Darwin.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}